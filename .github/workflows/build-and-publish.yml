name: Build and Publish

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true

    - name: Run go mod tidy
      run: go mod tidy

    - name: Verify go mod tidy
      run: |
        git diff --exit-code go.mod go.sum || \
          (echo "go.mod or go.sum is not up to date. Please run 'go mod tidy'" && exit 1)

    - name: Run go vet
      run: go vet ./...

    - name: Run go fmt
      run: |
        fmt_output=$(go fmt ./...)
        if [ -n "$fmt_output" ]; then
          echo "The following files need formatting:"
          echo "$fmt_output"
          exit 1
        fi

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  build-binaries:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Linux builds
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: linux
            goarch: arm
            goarm: "7"
            suffix: linux-armv7
          - goos: linux
            goarch: arm
            goarm: "6"
            suffix: linux-armv6
          # Windows builds
          - goos: windows
            goarch: amd64
            suffix: windows-amd64.exe
          - goos: windows
            goarch: arm64
            suffix: windows-arm64.exe
          # macOS builds
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        GOARM: ${{ matrix.goarm }}
      run: |
        VERSION="${GITHUB_REF_NAME}"
        if [[ "$VERSION" == "main" ]]; then
          VERSION="dev-${GITHUB_SHA::8}"
        fi
        go build -v -ldflags="-w -s -X main.version=${VERSION}" -o adsb2loki-${{ matrix.suffix }} .

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: adsb2loki-${{ matrix.suffix }}
        path: adsb2loki-${{ matrix.suffix }}

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to the Container registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          # For branches, create branch-SHA tags
          type=ref,event=branch
          # For PRs, create pr-NUMBER tags
          type=ref,event=pr
          # For tags, create version tags
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          # SHA tags only for non-tag events
          type=sha,enable=${{ !startsWith(github.ref, 'refs/tags/') }}
          # Latest tag only for version tags (not branch commits)
          type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
        labels: |
          org.opencontainers.image.description=ADS-B to Loki/OpenTelemetry exporter supporting both Loki HTTP API and OTLP

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      if: github.event_name != 'pull_request' && steps.build.outcome == 'success'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      if: github.event_name != 'pull_request' && steps.build.outcome == 'success'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  release:
    needs: [test, build-binaries, build-and-push]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: adsb2loki-*
        path: ./artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: ./artifacts/adsb2loki-*/*
        generate_release_notes: true
        body: |
          ## Multi-Architecture Binaries

          This release includes binaries for:
          - **Linux**: amd64, arm64, armv7, armv6
          - **Windows**: amd64, arm64
          - **macOS**: amd64 (Intel), arm64 (Apple Silicon)

          ## Docker Images

          Multi-architecture Docker images are available:
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          ```

          Supported platforms: linux/amd64, linux/arm64, linux/arm/v7, linux/arm/v6 
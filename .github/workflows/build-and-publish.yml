name: Build and Publish

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
      checks: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true

    - name: Install gotestsum
      run: go install gotest.tools/gotestsum@latest

    - name: Install golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

    - name: Run go mod tidy
      run: go mod tidy

    - name: Verify go mod tidy
      run: |
        git diff --exit-code go.mod go.sum || \
          (echo "go.mod or go.sum is not up to date. Please run 'go mod tidy'" && exit 1)

    - name: Run tests with gotestsum
      run: |
        gotestsum --junitfile junit.xml --format testname -- \
          -v -race -coverprofile=coverage.txt -covermode=atomic \
          -bench=. -benchmem ./... | tee test-output.txt

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          junit.xml
          test-output.txt
          coverage.txt

    - name: Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Go Tests
        path: junit.xml
        reporter: java-junit

    - name: Generate coverage report
      run: |
        go tool cover -html=coverage.txt -o coverage.html
        go tool cover -func=coverage.txt | tee coverage-summary.txt
        COVERAGE=$(go tool cover -func=coverage.txt | grep total | awk '{print $3}' | sed 's/%//')
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
        echo "Coverage: $COVERAGE%"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true

    - name: Create coverage badge
      if: github.ref == 'refs/heads/main'
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: YOUR_GIST_ID  # Replace with your Gist ID
        filename: adsb2loki-coverage.json
        label: coverage
        message: ${{ env.COVERAGE }}%
        valColorRange: ${{ env.COVERAGE }}
        maxColorRange: 100
        minColorRange: 0

    - name: Comment PR with test results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const coverage = process.env.COVERAGE;
          const fs = require('fs');
          
          let testOutput = 'No test output available';
          try {
            testOutput = fs.readFileSync('coverage-summary.txt', 'utf8');
          } catch (e) {}
          
          const comment = `## ðŸ§ª Test Results
          
          **Coverage:** ${coverage}%
          
          <details>
          <summary>Coverage Summary</summary>
          
          \`\`\`
          ${testOutput}
          \`\`\`
          </details>
          
          âœ… All tests passed!`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Run benchmarks
      run: |
        go test -bench=. -benchmem -count=3 ./... | tee benchmark.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark.txt

  build-binaries:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Linux builds
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: linux
            goarch: arm
            goarm: "7"
            suffix: linux-armv7
          - goos: linux
            goarch: arm
            goarm: "6"
            suffix: linux-armv6
          # Windows builds
          - goos: windows
            goarch: amd64
            suffix: windows-amd64.exe
          - goos: windows
            goarch: arm64
            suffix: windows-arm64.exe
          # macOS builds
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        GOARM: ${{ matrix.goarm }}
      run: |
        VERSION="${GITHUB_REF_NAME}"
        if [[ "$VERSION" == "main" ]]; then
          VERSION="dev-${GITHUB_SHA::8}"
        fi
        go build -v -ldflags="-w -s -X main.version=${VERSION}" -o adsb2loki-${{ matrix.suffix }} .
        
        # Calculate binary size
        SIZE=$(ls -lh adsb2loki-${{ matrix.suffix }} | awk '{print $5}')
        echo "Binary size for ${{ matrix.suffix }}: $SIZE"
        echo "${{ matrix.suffix }}: $SIZE" >> binary-sizes.txt

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        artifact-name: sbom-${{ matrix.suffix }}.spdx.json
        output-file: sbom-${{ matrix.suffix }}.spdx.json

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: adsb2loki-${{ matrix.suffix }}
        path: |
          adsb2loki-${{ matrix.suffix }}
          sbom-${{ matrix.suffix }}.spdx.json
          binary-sizes.txt

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
      id-token: write  # For attestation
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install cosign
      uses: sigstore/cosign-installer@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to the Container registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.description=ADS-B to Loki/OpenTelemetry exporter supporting both Loki HTTP API and OTLP

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=${{ github.event_name != 'pull_request' }}

    - name: Generate SBOM for container
      if: github.event_name != 'pull_request'
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
        artifact-name: container-sbom.spdx.json

    - name: Sign container image
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
      run: |
        cosign sign --yes \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}

    - name: Attest container image
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
      uses: actions/attest-build-provenance@v2
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ steps.build.outputs.digest }}
        push-to-registry: true

    - name: Run Trivy vulnerability scanner
      if: github.event_name != 'pull_request'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      if: github.event_name != 'pull_request'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Grype vulnerability scanner
      if: github.event_name != 'pull_request'
      uses: anchore/scan-action@v3
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
        fail-build: false
        output-format: sarif
        output-file: grype-results.sarif

    - name: Upload Grype scan results
      if: github.event_name != 'pull_request'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: grype-results.sarif

  release:
    needs: [test, build-binaries, build-and-push]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      attestations: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install cosign
      uses: sigstore/cosign-installer@v3

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Prepare release files
      run: |
        mkdir release-files
        for dir in artifacts/adsb2loki-*/; do
          if [ -d "$dir" ]; then
            cp "$dir"/* release-files/ || true
          fi
        done
        
        # Combine binary sizes
        echo "## Binary Sizes" > binary-sizes-combined.md
        echo "" >> binary-sizes-combined.md
        echo "| Platform | Size |" >> binary-sizes-combined.md
        echo "|----------|------|" >> binary-sizes-combined.md
        cat artifacts/*/binary-sizes.txt | sort -u | sed 's/: / | /' | sed 's/^/| /' | sed 's/$/ |/' >> binary-sizes-combined.md

    - name: Generate changelog
      id: changelog
      uses: orhun/git-cliff-action@v3
      with:
        config: .github/cliff.toml
        args: --latest --strip all
      env:
        OUTPUT: CHANGELOG.md

    - name: Sign release artifacts
      run: |
        for file in release-files/adsb2loki-*; do
          if [[ -f "$file" && ! "$file" =~ \.(json|txt|md)$ ]]; then
            cosign sign-blob --yes --output-signature="${file}.sig" --output-certificate="${file}.pem" "$file"
          fi
        done

    - name: Attest release artifacts
      uses: actions/attest-build-provenance@v2
      with:
        subject-path: 'release-files/adsb2loki-*'

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          release-files/*
          binary-sizes-combined.md
        generate_release_notes: true
        body: |
          ${{ steps.changelog.outputs.content }}
          
          ## Multi-Architecture Binaries

          This release includes binaries for:
          - **Linux**: amd64, arm64, armv7, armv6
          - **Windows**: amd64, arm64
          - **macOS**: amd64 (Intel), arm64 (Apple Silicon)

          ## Docker Images

          Multi-architecture Docker images are available:
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          ```

          Supported platforms: linux/amd64, linux/arm64, linux/arm/v7, linux/arm/v6
          
          ## Security
          
          - All binaries are signed with cosign and include attestation
          - SBOMs (Software Bill of Materials) are provided for all artifacts
          - Container images are signed and scanned for vulnerabilities
          
          ## Verification
          
          To verify a binary signature:
          ```bash
          cosign verify-blob --certificate adsb2loki-linux-amd64.pem --signature adsb2loki-linux-amd64.sig adsb2loki-linux-amd64
          ```
          
          To verify container image signature:
          ```bash
          cosign verify ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          ``` 
package flightaware

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"os"
	"time"

	"github.com/rknightion/adsb2loki/pkg/common"
	"github.com/rknightion/adsb2loki/pkg/models"
)

// FetchAndPushToLoki fetches data from FlightAware and pushes to Loki
func FetchAndPushToLoki(ctx context.Context, logger common.Logger) error {
	// Create request with context
	req, err := http.NewRequestWithContext(ctx, http.MethodGet, os.Getenv("AIRCRAFT_JSON_URL"), nil)
	if err != nil {
		return fmt.Errorf("failed to create request: %w", err)
	}

	// Make the request
	client := &http.Client{Timeout: 10 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		return fmt.Errorf("failed to fetch data: %w", err)
	}
	defer resp.Body.Close()

	var data models.AutoGenerated
	if err := json.NewDecoder(resp.Body).Decode(&data); err != nil {
		return fmt.Errorf("failed to decode JSON: %w", err)
	}

	// Convert to log entries
	var entries []common.LogEntry
	for i := range data.Aircraft {
		aircraft := &data.Aircraft[i] // Use pointer to avoid copying
		aircraftJSON, err := json.Marshal(aircraft)
		if err != nil {
			return fmt.Errorf("failed to marshal aircraft data: %w", err)
		}

		entry := common.LogEntry{
			Timestamp: time.Now(),
			Line:      string(aircraftJSON),
			Labels: map[string]string{
				"app": "flightaware",
			},
			StructuredMetadata: map[string]string{
				"hex":    aircraft.Hex,
				"flight": aircraft.Flight,
			},
		}

		// Add category to structured metadata if present
		if aircraft.Category != "" {
			entry.StructuredMetadata["category"] = aircraft.Category
		}

		entries = append(entries, entry)
	}

	// Push to logger
	if err := logger.PushLogs(ctx, entries); err != nil {
		return fmt.Errorf("failed to push logs: %w", err)
	}

	return nil
}

package models

import (
	"encoding/json"
	"testing"
)

func TestAutoGeneratedUnmarshal(t *testing.T) {
	jsonData := `{
		"now": 1234567890,
		"messages": 1000,
		"aircraft": [
			{
				"hex": "ABC123",
				"flight": "TEST123",
				"alt_baro": 35000,
				"gs": 450.5,
				"track": 180.0,
				"lat": 40.7128,
				"lon": -74.0060,
				"squawk": "1234",
				"category": "A3",
				"mlat": [],
				"tisb": [],
				"messages": 50,
				"seen": 0.5,
				"rssi": -10.5
			}
		]
	}`

	var data AutoGenerated
	err := json.Unmarshal([]byte(jsonData), &data)
	if err != nil {
		t.Fatalf("Failed to unmarshal JSON: %v", err)
	}

	// Verify top-level fields
	if data.Now != 1234567890 {
		t.Errorf("Expected Now=1234567890, got %f", data.Now)
	}
	if data.Messages != 1000 {
		t.Errorf("Expected Messages=1000, got %d", data.Messages)
	}

	// Verify aircraft data
	if len(data.Aircraft) != 1 {
		t.Fatalf("Expected 1 aircraft, got %d", len(data.Aircraft))
	}

	aircraft := data.Aircraft[0]
	if aircraft.Hex != "ABC123" {
		t.Errorf("Expected Hex=ABC123, got %s", aircraft.Hex)
	}
	if aircraft.Flight != "TEST123" {
		t.Errorf("Expected Flight=TEST123, got %s", aircraft.Flight)
	}
	if aircraft.AltBaro != 35000 {
		t.Errorf("Expected AltBaro=35000, got %d", aircraft.AltBaro)
	}
	if aircraft.Gs != 450.5 {
		t.Errorf("Expected Gs=450.5, got %f", aircraft.Gs)
	}
	if aircraft.Track != 180.0 {
		t.Errorf("Expected Track=180.0, got %f", aircraft.Track)
	}
	if aircraft.Lat != 40.7128 {
		t.Errorf("Expected Lat=40.7128, got %f", aircraft.Lat)
	}
	if aircraft.Lon != -74.0060 {
		t.Errorf("Expected Lon=-74.0060, got %f", aircraft.Lon)
	}
}

func TestAutoGeneratedMarshal(t *testing.T) {
	data := AutoGenerated{
		Now:      1234567890,
		Messages: 1000,
		Aircraft: []struct {
			Hex            string        `json:"hex"`
			Flight         string        `json:"flight,omitempty"`
			AltBaro        int           `json:"alt_baro,omitempty"`
			AltGeom        int           `json:"alt_geom,omitempty"`
			Gs             float64       `json:"gs,omitempty"`
			Ias            int           `json:"ias,omitempty"`
			Tas            int           `json:"tas,omitempty"`
			Mach           float64       `json:"mach,omitempty"`
			Track          float64       `json:"track,omitempty"`
			TrackRate      float64       `json:"track_rate,omitempty"`
			Roll           float64       `json:"roll,omitempty"`
			MagHeading     float64       `json:"mag_heading,omitempty"`
			BaroRate       int           `json:"baro_rate,omitempty"`
			GeomRate       int           `json:"geom_rate,omitempty"`
			Squawk         string        `json:"squawk,omitempty"`
			Emergency      string        `json:"emergency,omitempty"`
			Category       string        `json:"category,omitempty"`
			NavQnh         float64       `json:"nav_qnh,omitempty"`
			NavAltitudeMcp int           `json:"nav_altitude_mcp,omitempty"`
			NavHeading     float64       `json:"nav_heading,omitempty"`
			Lat            float64       `json:"lat,omitempty"`
			Lon            float64       `json:"lon,omitempty"`
			Nic            int           `json:"nic,omitempty"`
			Rc             int           `json:"rc,omitempty"`
			SeenPos        float64       `json:"seen_pos,omitempty"`
			Version        int           `json:"version,omitempty"`
			NicBaro        int           `json:"nic_baro,omitempty"`
			NacP           int           `json:"nac_p,omitempty"`
			NacV           int           `json:"nac_v,omitempty"`
			Sil            int           `json:"sil,omitempty"`
			SilType        string        `json:"sil_type,omitempty"`
			Gva            int           `json:"gva,omitempty"`
			Sda            int           `json:"sda,omitempty"`
			Mlat           []interface{} `json:"mlat"`
			Tisb           []interface{} `json:"tisb"`
			Messages       int           `json:"messages"`
			Seen           float64       `json:"seen"`
			Rssi           float64       `json:"rssi"`
			NavAltitudeFms int           `json:"nav_altitude_fms,omitempty"`
			NavModes       []string      `json:"nav_modes,omitempty"`
		}{
			{
				Hex:     "ABC123",
				Flight:  "TEST123",
				AltBaro: 35000,
				Gs:      450.5,
				Track:   180.0,
				Lat:     40.7128,
				Lon:     -74.0060,
				Mlat:    []interface{}{},
				Tisb:    []interface{}{},
			},
		},
	}

	jsonBytes, err := json.Marshal(data)
	if err != nil {
		t.Fatalf("Failed to marshal data: %v", err)
	}

	// Verify the JSON contains expected fields
	jsonStr := string(jsonBytes)
	expectedFields := []string{
		`"now":1234567890`,
		`"messages":1000`,
		`"hex":"ABC123"`,
		`"flight":"TEST123"`,
		`"alt_baro":35000`,
		`"gs":450.5`,
		`"track":180`,
		`"lat":40.7128`,
		`"lon":-74.006`,
	}

	for _, field := range expectedFields {
		if !contains(jsonStr, field) {
			t.Errorf("Expected JSON to contain %s, got %s", field, jsonStr)
		}
	}
}

func contains(s, substr string) bool {
	return len(s) >= len(substr) && s[0:len(s)] != "" && s[0:len(substr)] == substr || len(s) > len(substr) && contains(s[1:], substr)
}
